// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hybrid_scope.proto

#include "hybrid_scope.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hybrid_scope {
PROTOBUF_CONSTEXPR EchoRequest::EchoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EchoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoRequestDefaultTypeInternal() {}
  union {
    EchoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
PROTOBUF_CONSTEXPR EchoResponse::EchoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EchoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoResponseDefaultTypeInternal() {}
  union {
    EchoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
PROTOBUF_CONSTEXPR Void::Void(
    ::_pbi::ConstantInitialized) {}
struct VoidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoidDefaultTypeInternal() {}
  union {
    Void _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoidDefaultTypeInternal _Void_default_instance_;
PROTOBUF_CONSTEXPR RpcResult::RpcResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResultDefaultTypeInternal() {}
  union {
    RpcResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResultDefaultTypeInternal _RpcResult_default_instance_;
PROTOBUF_CONSTEXPR WgPeerInfo::WgPeerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pubkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prikey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv6_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mask_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgPeerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgPeerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgPeerInfoDefaultTypeInternal() {}
  union {
    WgPeerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgPeerInfoDefaultTypeInternal _WgPeerInfo_default_instance_;
PROTOBUF_CONSTEXPR WgGatewayConfig::WgGatewayConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gateway_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gateway_public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transport_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.virtual_ipv4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.virtual_ipv6_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.wireguard_port_)*/0u
  , /*decltype(_impl_.gateway_id_)*/0u
  , /*decltype(_impl_.keep_alive_)*/0u
  , /*decltype(_impl_.obf_key_)*/uint64_t{0u}
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.encrypt_mode_)*/0u
  , /*decltype(_impl_.mtu_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgGatewayConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgGatewayConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgGatewayConfigDefaultTypeInternal() {}
  union {
    WgGatewayConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgGatewayConfigDefaultTypeInternal _WgGatewayConfig_default_instance_;
PROTOBUF_CONSTEXPR WgTunnelConfig::WgTunnelConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peer_info_)*/nullptr
  , /*decltype(_impl_.gateway_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgTunnelConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgTunnelConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgTunnelConfigDefaultTypeInternal() {}
  union {
    WgTunnelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgTunnelConfigDefaultTypeInternal _WgTunnelConfig_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tenant_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.org_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR DeviceInfo::DeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR WgConfigRequest::WgConfigRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tunnels_)*/{}
  , /*decltype(_impl_.user_info_)*/nullptr
  , /*decltype(_impl_.device_info_)*/nullptr
  , /*decltype(_impl_.box_id_)*/uint64_t{0u}
  , /*decltype(_impl_.opt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgConfigRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgConfigRequestDefaultTypeInternal() {}
  union {
    WgConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgConfigRequestDefaultTypeInternal _WgConfigRequest_default_instance_;
PROTOBUF_CONSTEXPR WgStartupRequest::WgStartupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgStartupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgStartupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgStartupRequestDefaultTypeInternal() {}
  union {
    WgStartupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgStartupRequestDefaultTypeInternal _WgStartupRequest_default_instance_;
PROTOBUF_CONSTEXPR WgShutdownRequest::WgShutdownRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgShutdownRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgShutdownRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgShutdownRequestDefaultTypeInternal() {}
  union {
    WgShutdownRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgShutdownRequestDefaultTypeInternal _WgShutdownRequest_default_instance_;
PROTOBUF_CONSTEXPR WgExecRequest::WgExecRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmdline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgExecRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgExecRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgExecRequestDefaultTypeInternal() {}
  union {
    WgExecRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgExecRequestDefaultTypeInternal _WgExecRequest_default_instance_;
PROTOBUF_CONSTEXPR WgKeypair::WgKeypair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.private_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgKeypairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgKeypairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgKeypairDefaultTypeInternal() {}
  union {
    WgKeypair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgKeypairDefaultTypeInternal _WgKeypair_default_instance_;
PROTOBUF_CONSTEXPR WgPublicKey::WgPublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgPublicKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgPublicKeyDefaultTypeInternal() {}
  union {
    WgPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgPublicKeyDefaultTypeInternal _WgPublicKey_default_instance_;
PROTOBUF_CONSTEXPR WgPrivateKey::WgPrivateKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WgPrivateKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WgPrivateKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WgPrivateKeyDefaultTypeInternal() {}
  union {
    WgPrivateKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WgPrivateKeyDefaultTypeInternal _WgPrivateKey_default_instance_;
}  // namespace hybrid_scope
static ::_pb::Metadata file_level_metadata_hybrid_5fscope_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_hybrid_5fscope_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_hybrid_5fscope_2eproto = nullptr;

const uint32_t TableStruct_hybrid_5fscope_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::EchoRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::EchoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::EchoResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::Void, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::RpcResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::RpcResult, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::RpcResult, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPeerInfo, _impl_.pubkey_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPeerInfo, _impl_.prikey_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPeerInfo, _impl_.ipv4_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPeerInfo, _impl_.ipv6_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPeerInfo, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPeerInfo, _impl_.mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.wireguard_port_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.gateway_id_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.gateway_uuid_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.gateway_public_key_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.obf_key_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.keep_alive_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.transport_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.encrypt_mode_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.virtual_ipv4_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.virtual_ipv6_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgGatewayConfig, _impl_.mtu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgTunnelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgTunnelConfig, _impl_.peer_info_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgTunnelConfig, _impl_.gateway_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::UserInfo, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::UserInfo, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::UserInfo, _impl_.org_id_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::UserInfo, _impl_.tenant_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::DeviceInfo, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::DeviceInfo, _impl_.device_uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgConfigRequest, _impl_.opt_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgConfigRequest, _impl_.box_id_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgConfigRequest, _impl_.user_info_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgConfigRequest, _impl_.device_info_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgConfigRequest, _impl_.tunnels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgStartupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgStartupRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgShutdownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgShutdownRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgExecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgExecRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgExecRequest, _impl_.cmdline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgKeypair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgKeypair, _impl_.public_key_),
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgKeypair, _impl_.private_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPublicKey, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPrivateKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid_scope::WgPrivateKey, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::hybrid_scope::EchoRequest)},
  { 7, -1, -1, sizeof(::hybrid_scope::EchoResponse)},
  { 14, -1, -1, sizeof(::hybrid_scope::Void)},
  { 20, -1, -1, sizeof(::hybrid_scope::RpcResult)},
  { 28, -1, -1, sizeof(::hybrid_scope::WgPeerInfo)},
  { 40, -1, -1, sizeof(::hybrid_scope::WgGatewayConfig)},
  { 61, -1, -1, sizeof(::hybrid_scope::WgTunnelConfig)},
  { 69, -1, -1, sizeof(::hybrid_scope::UserInfo)},
  { 79, -1, -1, sizeof(::hybrid_scope::DeviceInfo)},
  { 87, -1, -1, sizeof(::hybrid_scope::WgConfigRequest)},
  { 98, -1, -1, sizeof(::hybrid_scope::WgStartupRequest)},
  { 105, -1, -1, sizeof(::hybrid_scope::WgShutdownRequest)},
  { 112, -1, -1, sizeof(::hybrid_scope::WgExecRequest)},
  { 120, -1, -1, sizeof(::hybrid_scope::WgKeypair)},
  { 128, -1, -1, sizeof(::hybrid_scope::WgPublicKey)},
  { 135, -1, -1, sizeof(::hybrid_scope::WgPrivateKey)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hybrid_scope::_EchoRequest_default_instance_._instance,
  &::hybrid_scope::_EchoResponse_default_instance_._instance,
  &::hybrid_scope::_Void_default_instance_._instance,
  &::hybrid_scope::_RpcResult_default_instance_._instance,
  &::hybrid_scope::_WgPeerInfo_default_instance_._instance,
  &::hybrid_scope::_WgGatewayConfig_default_instance_._instance,
  &::hybrid_scope::_WgTunnelConfig_default_instance_._instance,
  &::hybrid_scope::_UserInfo_default_instance_._instance,
  &::hybrid_scope::_DeviceInfo_default_instance_._instance,
  &::hybrid_scope::_WgConfigRequest_default_instance_._instance,
  &::hybrid_scope::_WgStartupRequest_default_instance_._instance,
  &::hybrid_scope::_WgShutdownRequest_default_instance_._instance,
  &::hybrid_scope::_WgExecRequest_default_instance_._instance,
  &::hybrid_scope::_WgKeypair_default_instance_._instance,
  &::hybrid_scope::_WgPublicKey_default_instance_._instance,
  &::hybrid_scope::_WgPrivateKey_default_instance_._instance,
};

const char descriptor_table_protodef_hybrid_5fscope_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022hybrid_scope.proto\022\014hybrid_scope\"\033\n\013Ec"
  "hoRequest\022\014\n\004name\030\001 \001(\t\"\037\n\014EchoResponse\022"
  "\017\n\007message\030\001 \001(\t\"\006\n\004Void\"*\n\tRpcResult\022\014\n"
  "\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\"d\n\nWgPeerIn"
  "fo\022\016\n\006pubkey\030\001 \001(\t\022\016\n\006prikey\030\002 \001(\t\022\014\n\004ip"
  "v4\030\003 \001(\t\022\014\n\004ipv6\030\004 \001(\t\022\014\n\004port\030\005 \001(\r\022\014\n\004"
  "mask\030\006 \001(\t\"\252\002\n\017WgGatewayConfig\022\n\n\002id\030\001 \001"
  "(\005\022\n\n\002ip\030\002 \001(\t\022\026\n\016wireguard_port\030\003 \001(\r\022\014"
  "\n\004name\030\004 \001(\t\022\022\n\ngateway_id\030\005 \001(\r\022\024\n\014gate"
  "way_uuid\030\006 \001(\t\022\032\n\022gateway_public_key\030\007 \001"
  "(\t\022\017\n\007obf_key\030\010 \001(\004\022\022\n\nkeep_alive\030\t \001(\r\022"
  "\021\n\ttransport\030\n \001(\t\022\014\n\004mode\030\013 \001(\r\022\024\n\014encr"
  "ypt_mode\030\014 \001(\r\022\024\n\014virtual_ipv4\030\r \001(\t\022\024\n\014"
  "virtual_ipv6\030\016 \001(\t\022\013\n\003mtu\030\017 \001(\r\"r\n\016WgTun"
  "nelConfig\022+\n\tpeer_info\030\001 \001(\0132\030.hybrid_sc"
  "ope.WgPeerInfo\0223\n\014gateway_info\030\002 \001(\0132\035.h"
  "ybrid_scope.WgGatewayConfig\"O\n\010UserInfo\022"
  "\r\n\005token\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\004\022\016\n\006org_i"
  "d\030\003 \001(\004\022\023\n\013tenant_name\030\" \001(\t\"4\n\nDeviceIn"
  "fo\022\021\n\tdevice_id\030\001 \001(\005\022\023\n\013device_uuid\030\002 \001"
  "(\t\"\267\001\n\017WgConfigRequest\022\013\n\003opt\030\001 \001(\005\022\016\n\006b"
  "ox_id\030\002 \001(\004\022)\n\tuser_info\030\003 \001(\0132\026.hybrid_"
  "scope.UserInfo\022-\n\013device_info\030\004 \001(\0132\030.hy"
  "brid_scope.DeviceInfo\022-\n\007tunnels\030\005 \003(\0132\034"
  ".hybrid_scope.WgTunnelConfig\"\036\n\020WgStartu"
  "pRequest\022\n\n\002id\030\001 \001(\005\"\037\n\021WgShutdownReques"
  "t\022\n\n\002id\030\001 \001(\005\",\n\rWgExecRequest\022\n\n\002id\030\001 \001"
  "(\005\022\017\n\007cmdline\030\002 \001(\t\"4\n\tWgKeypair\022\022\n\npubl"
  "ic_key\030\001 \001(\t\022\023\n\013private_key\030\002 \001(\t\"\034\n\013WgP"
  "ublicKey\022\r\n\005value\030\001 \001(\t\"\035\n\014WgPrivateKey\022"
  "\r\n\005value\030\001 \001(\t2E\n\004Echo\022=\n\004echo\022\031.hybrid_"
  "scope.EchoRequest\032\032.hybrid_scope.EchoRes"
  "ponse2\223\002\n\002Wg\022B\n\007startup\022\036.hybrid_scope.W"
  "gStartupRequest\032\027.hybrid_scope.RpcResult"
  "\022D\n\010shutdown\022\037.hybrid_scope.WgShutdownRe"
  "quest\032\027.hybrid_scope.RpcResult\022E\n\013sync_c"
  "onfig\022\035.hybrid_scope.WgConfigRequest\032\027.h"
  "ybrid_scope.RpcResult\022<\n\004exec\022\033.hybrid_s"
  "cope.WgExecRequest\032\027.hybrid_scope.RpcRes"
  "ult2\236\001\n\021KeychainGenerater\022\?\n\020generate_ke"
  "ypair\022\022.hybrid_scope.Void\032\027.hybrid_scope"
  ".WgKeypair\022H\n\017generate_public\022\032.hybrid_s"
  "cope.WgPrivateKey\032\031.hybrid_scope.WgPubli"
  "cKeyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_hybrid_5fscope_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hybrid_5fscope_2eproto = {
    false, false, 1732, descriptor_table_protodef_hybrid_5fscope_2eproto,
    "hybrid_scope.proto",
    &descriptor_table_hybrid_5fscope_2eproto_once, nullptr, 0, 16,
    schemas, file_default_instances, TableStruct_hybrid_5fscope_2eproto::offsets,
    file_level_metadata_hybrid_5fscope_2eproto, file_level_enum_descriptors_hybrid_5fscope_2eproto,
    file_level_service_descriptors_hybrid_5fscope_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hybrid_5fscope_2eproto_getter() {
  return &descriptor_table_hybrid_5fscope_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hybrid_5fscope_2eproto(&descriptor_table_hybrid_5fscope_2eproto);
namespace hybrid_scope {

// ===================================================================

class EchoRequest::_Internal {
 public:
};

EchoRequest::EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EchoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.EchoRequest)
}

inline void EchoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:hybrid_scope.EchoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void EchoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.EchoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.EchoRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.EchoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.EchoRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.EchoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EchoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoRequest::GetClassData() const { return &_class_data_; }


void EchoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EchoRequest*>(&to_msg);
  auto& from = static_cast<const EchoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.EchoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  return true;
}

void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[0]);
}

// ===================================================================

class EchoResponse::_Internal {
 public:
};

EchoResponse::EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EchoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.EchoResponse)
}

inline void EchoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:hybrid_scope.EchoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void EchoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.EchoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.EchoResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.EchoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.EchoResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.EchoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EchoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoResponse::GetClassData() const { return &_class_data_; }


void EchoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EchoResponse*>(&to_msg);
  auto& from = static_cast<const EchoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.EchoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  return true;
}

void EchoResponse::InternalSwap(EchoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[1]);
}

// ===================================================================

class Void::_Internal {
 public:
};

Void::Void(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.Void)
}
Void::Void(const Void& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Void* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.Void)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Void::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Void::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Void::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[2]);
}

// ===================================================================

class RpcResult::_Internal {
 public:
};

RpcResult::RpcResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.RpcResult)
}
RpcResult::RpcResult(const RpcResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.RpcResult)
}

inline void RpcResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcResult::~RpcResult() {
  // @@protoc_insertion_point(destructor:hybrid_scope.RpcResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void RpcResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.RpcResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.RpcResult.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.RpcResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.RpcResult.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.RpcResult)
  return target;
}

size_t RpcResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.RpcResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResult::GetClassData() const { return &_class_data_; }


void RpcResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcResult*>(&to_msg);
  auto& from = static_cast<const RpcResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.RpcResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResult::CopyFrom(const RpcResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.RpcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResult::IsInitialized() const {
  return true;
}

void RpcResult::InternalSwap(RpcResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[3]);
}

// ===================================================================

class WgPeerInfo::_Internal {
 public:
};

WgPeerInfo::WgPeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgPeerInfo)
}
WgPeerInfo::WgPeerInfo(const WgPeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgPeerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){}
    , decltype(_impl_.prikey_){}
    , decltype(_impl_.ipv4_){}
    , decltype(_impl_.ipv6_){}
    , decltype(_impl_.mask_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pubkey().empty()) {
    _this->_impl_.pubkey_.Set(from._internal_pubkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prikey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prikey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prikey().empty()) {
    _this->_impl_.prikey_.Set(from._internal_prikey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ipv4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv4().empty()) {
    _this->_impl_.ipv4_.Set(from._internal_ipv4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ipv6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6().empty()) {
    _this->_impl_.ipv6_.Set(from._internal_ipv6(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mask().empty()) {
    _this->_impl_.mask_.Set(from._internal_mask(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgPeerInfo)
}

inline void WgPeerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){}
    , decltype(_impl_.prikey_){}
    , decltype(_impl_.ipv4_){}
    , decltype(_impl_.ipv6_){}
    , decltype(_impl_.mask_){}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prikey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prikey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipv4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipv6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WgPeerInfo::~WgPeerInfo() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgPeerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgPeerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pubkey_.Destroy();
  _impl_.prikey_.Destroy();
  _impl_.ipv4_.Destroy();
  _impl_.ipv6_.Destroy();
  _impl_.mask_.Destroy();
}

void WgPeerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgPeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgPeerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pubkey_.ClearToEmpty();
  _impl_.prikey_.ClearToEmpty();
  _impl_.ipv4_.ClearToEmpty();
  _impl_.ipv6_.ClearToEmpty();
  _impl_.mask_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgPeerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgPeerInfo.pubkey"));
        } else
          goto handle_unusual;
        continue;
      // string prikey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prikey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgPeerInfo.prikey"));
        } else
          goto handle_unusual;
        continue;
      // string ipv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ipv4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgPeerInfo.ipv4"));
        } else
          goto handle_unusual;
        continue;
      // string ipv6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ipv6();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgPeerInfo.ipv6"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mask = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mask();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgPeerInfo.mask"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgPeerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgPeerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pubkey = 1;
  if (!this->_internal_pubkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pubkey().data(), static_cast<int>(this->_internal_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgPeerInfo.pubkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // string prikey = 2;
  if (!this->_internal_prikey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prikey().data(), static_cast<int>(this->_internal_prikey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgPeerInfo.prikey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prikey(), target);
  }

  // string ipv4 = 3;
  if (!this->_internal_ipv4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv4().data(), static_cast<int>(this->_internal_ipv4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgPeerInfo.ipv4");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ipv4(), target);
  }

  // string ipv6 = 4;
  if (!this->_internal_ipv6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6().data(), static_cast<int>(this->_internal_ipv6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgPeerInfo.ipv6");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ipv6(), target);
  }

  // uint32 port = 5;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port(), target);
  }

  // string mask = 6;
  if (!this->_internal_mask().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mask().data(), static_cast<int>(this->_internal_mask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgPeerInfo.mask");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgPeerInfo)
  return target;
}

size_t WgPeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgPeerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pubkey = 1;
  if (!this->_internal_pubkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pubkey());
  }

  // string prikey = 2;
  if (!this->_internal_prikey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prikey());
  }

  // string ipv4 = 3;
  if (!this->_internal_ipv4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv4());
  }

  // string ipv6 = 4;
  if (!this->_internal_ipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6());
  }

  // string mask = 6;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mask());
  }

  // uint32 port = 5;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgPeerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgPeerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgPeerInfo::GetClassData() const { return &_class_data_; }


void WgPeerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgPeerInfo*>(&to_msg);
  auto& from = static_cast<const WgPeerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgPeerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pubkey().empty()) {
    _this->_internal_set_pubkey(from._internal_pubkey());
  }
  if (!from._internal_prikey().empty()) {
    _this->_internal_set_prikey(from._internal_prikey());
  }
  if (!from._internal_ipv4().empty()) {
    _this->_internal_set_ipv4(from._internal_ipv4());
  }
  if (!from._internal_ipv6().empty()) {
    _this->_internal_set_ipv6(from._internal_ipv6());
  }
  if (!from._internal_mask().empty()) {
    _this->_internal_set_mask(from._internal_mask());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgPeerInfo::CopyFrom(const WgPeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgPeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgPeerInfo::IsInitialized() const {
  return true;
}

void WgPeerInfo::InternalSwap(WgPeerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pubkey_, lhs_arena,
      &other->_impl_.pubkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prikey_, lhs_arena,
      &other->_impl_.prikey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipv4_, lhs_arena,
      &other->_impl_.ipv4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipv6_, lhs_arena,
      &other->_impl_.ipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mask_, lhs_arena,
      &other->_impl_.mask_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WgPeerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[4]);
}

// ===================================================================

class WgGatewayConfig::_Internal {
 public:
};

WgGatewayConfig::WgGatewayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgGatewayConfig)
}
WgGatewayConfig::WgGatewayConfig(const WgGatewayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgGatewayConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.gateway_uuid_){}
    , decltype(_impl_.gateway_public_key_){}
    , decltype(_impl_.transport_){}
    , decltype(_impl_.virtual_ipv4_){}
    , decltype(_impl_.virtual_ipv6_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.wireguard_port_){}
    , decltype(_impl_.gateway_id_){}
    , decltype(_impl_.keep_alive_){}
    , decltype(_impl_.obf_key_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.encrypt_mode_){}
    , decltype(_impl_.mtu_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gateway_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gateway_uuid().empty()) {
    _this->_impl_.gateway_uuid_.Set(from._internal_gateway_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gateway_public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gateway_public_key().empty()) {
    _this->_impl_.gateway_public_key_.Set(from._internal_gateway_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transport().empty()) {
    _this->_impl_.transport_.Set(from._internal_transport(), 
      _this->GetArenaForAllocation());
  }
  _impl_.virtual_ipv4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_ipv4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_virtual_ipv4().empty()) {
    _this->_impl_.virtual_ipv4_.Set(from._internal_virtual_ipv4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.virtual_ipv6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_ipv6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_virtual_ipv6().empty()) {
    _this->_impl_.virtual_ipv6_.Set(from._internal_virtual_ipv6(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mtu_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.mtu_));
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgGatewayConfig)
}

inline void WgGatewayConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.gateway_uuid_){}
    , decltype(_impl_.gateway_public_key_){}
    , decltype(_impl_.transport_){}
    , decltype(_impl_.virtual_ipv4_){}
    , decltype(_impl_.virtual_ipv6_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.wireguard_port_){0u}
    , decltype(_impl_.gateway_id_){0u}
    , decltype(_impl_.keep_alive_){0u}
    , decltype(_impl_.obf_key_){uint64_t{0u}}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.encrypt_mode_){0u}
    , decltype(_impl_.mtu_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gateway_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gateway_public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transport_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.virtual_ipv4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_ipv4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.virtual_ipv6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_ipv6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WgGatewayConfig::~WgGatewayConfig() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgGatewayConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgGatewayConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.name_.Destroy();
  _impl_.gateway_uuid_.Destroy();
  _impl_.gateway_public_key_.Destroy();
  _impl_.transport_.Destroy();
  _impl_.virtual_ipv4_.Destroy();
  _impl_.virtual_ipv6_.Destroy();
}

void WgGatewayConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgGatewayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgGatewayConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.gateway_uuid_.ClearToEmpty();
  _impl_.gateway_public_key_.ClearToEmpty();
  _impl_.transport_.ClearToEmpty();
  _impl_.virtual_ipv4_.ClearToEmpty();
  _impl_.virtual_ipv6_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mtu_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.mtu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgGatewayConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgGatewayConfig.ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 wireguard_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.wireguard_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgGatewayConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 gateway_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gateway_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gateway_uuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_gateway_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgGatewayConfig.gateway_uuid"));
        } else
          goto handle_unusual;
        continue;
      // string gateway_public_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_gateway_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgGatewayConfig.gateway_public_key"));
        } else
          goto handle_unusual;
        continue;
      // uint64 obf_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.obf_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keep_alive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.keep_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transport = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_transport();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgGatewayConfig.transport"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 encrypt_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.encrypt_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string virtual_ipv4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_virtual_ipv4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgGatewayConfig.virtual_ipv4"));
        } else
          goto handle_unusual;
        continue;
      // string virtual_ipv6 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_virtual_ipv6();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgGatewayConfig.virtual_ipv6"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgGatewayConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgGatewayConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgGatewayConfig.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // uint32 wireguard_port = 3;
  if (this->_internal_wireguard_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wireguard_port(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgGatewayConfig.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint32 gateway_id = 5;
  if (this->_internal_gateway_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gateway_id(), target);
  }

  // string gateway_uuid = 6;
  if (!this->_internal_gateway_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway_uuid().data(), static_cast<int>(this->_internal_gateway_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgGatewayConfig.gateway_uuid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gateway_uuid(), target);
  }

  // string gateway_public_key = 7;
  if (!this->_internal_gateway_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway_public_key().data(), static_cast<int>(this->_internal_gateway_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgGatewayConfig.gateway_public_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_gateway_public_key(), target);
  }

  // uint64 obf_key = 8;
  if (this->_internal_obf_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_obf_key(), target);
  }

  // uint32 keep_alive = 9;
  if (this->_internal_keep_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_keep_alive(), target);
  }

  // string transport = 10;
  if (!this->_internal_transport().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transport().data(), static_cast<int>(this->_internal_transport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgGatewayConfig.transport");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_transport(), target);
  }

  // uint32 mode = 11;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_mode(), target);
  }

  // uint32 encrypt_mode = 12;
  if (this->_internal_encrypt_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_encrypt_mode(), target);
  }

  // string virtual_ipv4 = 13;
  if (!this->_internal_virtual_ipv4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_ipv4().data(), static_cast<int>(this->_internal_virtual_ipv4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgGatewayConfig.virtual_ipv4");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_virtual_ipv4(), target);
  }

  // string virtual_ipv6 = 14;
  if (!this->_internal_virtual_ipv6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_ipv6().data(), static_cast<int>(this->_internal_virtual_ipv6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgGatewayConfig.virtual_ipv6");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_virtual_ipv6(), target);
  }

  // uint32 mtu = 15;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_mtu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgGatewayConfig)
  return target;
}

size_t WgGatewayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgGatewayConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string gateway_uuid = 6;
  if (!this->_internal_gateway_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway_uuid());
  }

  // string gateway_public_key = 7;
  if (!this->_internal_gateway_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway_public_key());
  }

  // string transport = 10;
  if (!this->_internal_transport().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transport());
  }

  // string virtual_ipv4 = 13;
  if (!this->_internal_virtual_ipv4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_ipv4());
  }

  // string virtual_ipv6 = 14;
  if (!this->_internal_virtual_ipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_ipv6());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // uint32 wireguard_port = 3;
  if (this->_internal_wireguard_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wireguard_port());
  }

  // uint32 gateway_id = 5;
  if (this->_internal_gateway_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gateway_id());
  }

  // uint32 keep_alive = 9;
  if (this->_internal_keep_alive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keep_alive());
  }

  // uint64 obf_key = 8;
  if (this->_internal_obf_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_obf_key());
  }

  // uint32 mode = 11;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint32 encrypt_mode = 12;
  if (this->_internal_encrypt_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_encrypt_mode());
  }

  // uint32 mtu = 15;
  if (this->_internal_mtu() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgGatewayConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgGatewayConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgGatewayConfig::GetClassData() const { return &_class_data_; }


void WgGatewayConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgGatewayConfig*>(&to_msg);
  auto& from = static_cast<const WgGatewayConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgGatewayConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_gateway_uuid().empty()) {
    _this->_internal_set_gateway_uuid(from._internal_gateway_uuid());
  }
  if (!from._internal_gateway_public_key().empty()) {
    _this->_internal_set_gateway_public_key(from._internal_gateway_public_key());
  }
  if (!from._internal_transport().empty()) {
    _this->_internal_set_transport(from._internal_transport());
  }
  if (!from._internal_virtual_ipv4().empty()) {
    _this->_internal_set_virtual_ipv4(from._internal_virtual_ipv4());
  }
  if (!from._internal_virtual_ipv6().empty()) {
    _this->_internal_set_virtual_ipv6(from._internal_virtual_ipv6());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_wireguard_port() != 0) {
    _this->_internal_set_wireguard_port(from._internal_wireguard_port());
  }
  if (from._internal_gateway_id() != 0) {
    _this->_internal_set_gateway_id(from._internal_gateway_id());
  }
  if (from._internal_keep_alive() != 0) {
    _this->_internal_set_keep_alive(from._internal_keep_alive());
  }
  if (from._internal_obf_key() != 0) {
    _this->_internal_set_obf_key(from._internal_obf_key());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_encrypt_mode() != 0) {
    _this->_internal_set_encrypt_mode(from._internal_encrypt_mode());
  }
  if (from._internal_mtu() != 0) {
    _this->_internal_set_mtu(from._internal_mtu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgGatewayConfig::CopyFrom(const WgGatewayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgGatewayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgGatewayConfig::IsInitialized() const {
  return true;
}

void WgGatewayConfig::InternalSwap(WgGatewayConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gateway_uuid_, lhs_arena,
      &other->_impl_.gateway_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gateway_public_key_, lhs_arena,
      &other->_impl_.gateway_public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transport_, lhs_arena,
      &other->_impl_.transport_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.virtual_ipv4_, lhs_arena,
      &other->_impl_.virtual_ipv4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.virtual_ipv6_, lhs_arena,
      &other->_impl_.virtual_ipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WgGatewayConfig, _impl_.mtu_)
      + sizeof(WgGatewayConfig::_impl_.mtu_)
      - PROTOBUF_FIELD_OFFSET(WgGatewayConfig, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WgGatewayConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[5]);
}

// ===================================================================

class WgTunnelConfig::_Internal {
 public:
  static const ::hybrid_scope::WgPeerInfo& peer_info(const WgTunnelConfig* msg);
  static const ::hybrid_scope::WgGatewayConfig& gateway_info(const WgTunnelConfig* msg);
};

const ::hybrid_scope::WgPeerInfo&
WgTunnelConfig::_Internal::peer_info(const WgTunnelConfig* msg) {
  return *msg->_impl_.peer_info_;
}
const ::hybrid_scope::WgGatewayConfig&
WgTunnelConfig::_Internal::gateway_info(const WgTunnelConfig* msg) {
  return *msg->_impl_.gateway_info_;
}
WgTunnelConfig::WgTunnelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgTunnelConfig)
}
WgTunnelConfig::WgTunnelConfig(const WgTunnelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgTunnelConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_info_){nullptr}
    , decltype(_impl_.gateway_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_info()) {
    _this->_impl_.peer_info_ = new ::hybrid_scope::WgPeerInfo(*from._impl_.peer_info_);
  }
  if (from._internal_has_gateway_info()) {
    _this->_impl_.gateway_info_ = new ::hybrid_scope::WgGatewayConfig(*from._impl_.gateway_info_);
  }
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgTunnelConfig)
}

inline void WgTunnelConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_info_){nullptr}
    , decltype(_impl_.gateway_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WgTunnelConfig::~WgTunnelConfig() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgTunnelConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgTunnelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.peer_info_;
  if (this != internal_default_instance()) delete _impl_.gateway_info_;
}

void WgTunnelConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgTunnelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgTunnelConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.peer_info_ != nullptr) {
    delete _impl_.peer_info_;
  }
  _impl_.peer_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gateway_info_ != nullptr) {
    delete _impl_.gateway_info_;
  }
  _impl_.gateway_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgTunnelConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hybrid_scope.WgPeerInfo peer_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .hybrid_scope.WgGatewayConfig gateway_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gateway_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgTunnelConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgTunnelConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hybrid_scope.WgPeerInfo peer_info = 1;
  if (this->_internal_has_peer_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::peer_info(this),
        _Internal::peer_info(this).GetCachedSize(), target, stream);
  }

  // .hybrid_scope.WgGatewayConfig gateway_info = 2;
  if (this->_internal_has_gateway_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gateway_info(this),
        _Internal::gateway_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgTunnelConfig)
  return target;
}

size_t WgTunnelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgTunnelConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hybrid_scope.WgPeerInfo peer_info = 1;
  if (this->_internal_has_peer_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_info_);
  }

  // .hybrid_scope.WgGatewayConfig gateway_info = 2;
  if (this->_internal_has_gateway_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gateway_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgTunnelConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgTunnelConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgTunnelConfig::GetClassData() const { return &_class_data_; }


void WgTunnelConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgTunnelConfig*>(&to_msg);
  auto& from = static_cast<const WgTunnelConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgTunnelConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_info()) {
    _this->_internal_mutable_peer_info()->::hybrid_scope::WgPeerInfo::MergeFrom(
        from._internal_peer_info());
  }
  if (from._internal_has_gateway_info()) {
    _this->_internal_mutable_gateway_info()->::hybrid_scope::WgGatewayConfig::MergeFrom(
        from._internal_gateway_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgTunnelConfig::CopyFrom(const WgTunnelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgTunnelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgTunnelConfig::IsInitialized() const {
  return true;
}

void WgTunnelConfig::InternalSwap(WgTunnelConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WgTunnelConfig, _impl_.gateway_info_)
      + sizeof(WgTunnelConfig::_impl_.gateway_info_)
      - PROTOBUF_FIELD_OFFSET(WgTunnelConfig, _impl_.peer_info_)>(
          reinterpret_cast<char*>(&_impl_.peer_info_),
          reinterpret_cast<char*>(&other->_impl_.peer_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WgTunnelConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[6]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.tenant_name_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.org_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tenant_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenant_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tenant_name().empty()) {
    _this->_impl_.tenant_name_.Set(from._internal_tenant_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.org_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.org_id_));
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.tenant_name_){}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.org_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tenant_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenant_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:hybrid_scope.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.tenant_name_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.tenant_name_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.org_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.org_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.UserInfo.token"));
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 org_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.org_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tenant_name = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tenant_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.UserInfo.tenant_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.UserInfo.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // uint64 org_id = 3;
  if (this->_internal_org_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_org_id(), target);
  }

  // string tenant_name = 34;
  if (!this->_internal_tenant_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenant_name().data(), static_cast<int>(this->_internal_tenant_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.UserInfo.tenant_name");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_tenant_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string tenant_name = 34;
  if (!this->_internal_tenant_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenant_name());
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 org_id = 3;
  if (this->_internal_org_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_tenant_name().empty()) {
    _this->_internal_set_tenant_name(from._internal_tenant_name());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_org_id() != 0) {
    _this->_internal_set_org_id(from._internal_org_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tenant_name_, lhs_arena,
      &other->_impl_.tenant_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.org_id_)
      + sizeof(UserInfo::_impl_.org_id_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[7]);
}

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_uuid_){}
    , decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_uuid().empty()) {
    _this->_impl_.device_uuid_.Set(from._internal_device_uuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.device_id_ = from._impl_.device_id_;
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.DeviceInfo)
}

inline void DeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_uuid_){}
    , decltype(_impl_.device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:hybrid_scope.DeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_uuid_.Destroy();
}

void DeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.DeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_uuid_.ClearToEmpty();
  _impl_.device_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.DeviceInfo.device_uuid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.DeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_id = 1;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_id(), target);
  }

  // string device_uuid = 2;
  if (!this->_internal_device_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_uuid().data(), static_cast<int>(this->_internal_device_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.DeviceInfo.device_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.DeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_uuid = 2;
  if (!this->_internal_device_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_uuid());
  }

  // int32 device_id = 1;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }


void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceInfo*>(&to_msg);
  auto& from = static_cast<const DeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_uuid().empty()) {
    _this->_internal_set_device_uuid(from._internal_device_uuid());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_uuid_, lhs_arena,
      &other->_impl_.device_uuid_, rhs_arena
  );
  swap(_impl_.device_id_, other->_impl_.device_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[8]);
}

// ===================================================================

class WgConfigRequest::_Internal {
 public:
  static const ::hybrid_scope::UserInfo& user_info(const WgConfigRequest* msg);
  static const ::hybrid_scope::DeviceInfo& device_info(const WgConfigRequest* msg);
};

const ::hybrid_scope::UserInfo&
WgConfigRequest::_Internal::user_info(const WgConfigRequest* msg) {
  return *msg->_impl_.user_info_;
}
const ::hybrid_scope::DeviceInfo&
WgConfigRequest::_Internal::device_info(const WgConfigRequest* msg) {
  return *msg->_impl_.device_info_;
}
WgConfigRequest::WgConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgConfigRequest)
}
WgConfigRequest::WgConfigRequest(const WgConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgConfigRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tunnels_){from._impl_.tunnels_}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.device_info_){nullptr}
    , decltype(_impl_.box_id_){}
    , decltype(_impl_.opt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    _this->_impl_.user_info_ = new ::hybrid_scope::UserInfo(*from._impl_.user_info_);
  }
  if (from._internal_has_device_info()) {
    _this->_impl_.device_info_ = new ::hybrid_scope::DeviceInfo(*from._impl_.device_info_);
  }
  ::memcpy(&_impl_.box_id_, &from._impl_.box_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opt_) -
    reinterpret_cast<char*>(&_impl_.box_id_)) + sizeof(_impl_.opt_));
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgConfigRequest)
}

inline void WgConfigRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tunnels_){arena}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.device_info_){nullptr}
    , decltype(_impl_.box_id_){uint64_t{0u}}
    , decltype(_impl_.opt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WgConfigRequest::~WgConfigRequest() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgConfigRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tunnels_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_info_;
  if (this != internal_default_instance()) delete _impl_.device_info_;
}

void WgConfigRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgConfigRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tunnels_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.device_info_ != nullptr) {
    delete _impl_.device_info_;
  }
  _impl_.device_info_ = nullptr;
  ::memset(&_impl_.box_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.opt_) -
      reinterpret_cast<char*>(&_impl_.box_id_)) + sizeof(_impl_.opt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgConfigRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 opt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 box_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.box_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .hybrid_scope.UserInfo user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .hybrid_scope.DeviceInfo device_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .hybrid_scope.WgTunnelConfig tunnels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tunnels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgConfigRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgConfigRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 opt = 1;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_opt(), target);
  }

  // uint64 box_id = 2;
  if (this->_internal_box_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_box_id(), target);
  }

  // .hybrid_scope.UserInfo user_info = 3;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  // .hybrid_scope.DeviceInfo device_info = 4;
  if (this->_internal_has_device_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::device_info(this),
        _Internal::device_info(this).GetCachedSize(), target, stream);
  }

  // repeated .hybrid_scope.WgTunnelConfig tunnels = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tunnels_size()); i < n; i++) {
    const auto& repfield = this->_internal_tunnels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgConfigRequest)
  return target;
}

size_t WgConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgConfigRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hybrid_scope.WgTunnelConfig tunnels = 5;
  total_size += 1UL * this->_internal_tunnels_size();
  for (const auto& msg : this->_impl_.tunnels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .hybrid_scope.UserInfo user_info = 3;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_info_);
  }

  // .hybrid_scope.DeviceInfo device_info = 4;
  if (this->_internal_has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_info_);
  }

  // uint64 box_id = 2;
  if (this->_internal_box_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_box_id());
  }

  // int32 opt = 1;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgConfigRequest::GetClassData() const { return &_class_data_; }


void WgConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgConfigRequest*>(&to_msg);
  auto& from = static_cast<const WgConfigRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgConfigRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tunnels_.MergeFrom(from._impl_.tunnels_);
  if (from._internal_has_user_info()) {
    _this->_internal_mutable_user_info()->::hybrid_scope::UserInfo::MergeFrom(
        from._internal_user_info());
  }
  if (from._internal_has_device_info()) {
    _this->_internal_mutable_device_info()->::hybrid_scope::DeviceInfo::MergeFrom(
        from._internal_device_info());
  }
  if (from._internal_box_id() != 0) {
    _this->_internal_set_box_id(from._internal_box_id());
  }
  if (from._internal_opt() != 0) {
    _this->_internal_set_opt(from._internal_opt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgConfigRequest::CopyFrom(const WgConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgConfigRequest::IsInitialized() const {
  return true;
}

void WgConfigRequest::InternalSwap(WgConfigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tunnels_.InternalSwap(&other->_impl_.tunnels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WgConfigRequest, _impl_.opt_)
      + sizeof(WgConfigRequest::_impl_.opt_)
      - PROTOBUF_FIELD_OFFSET(WgConfigRequest, _impl_.user_info_)>(
          reinterpret_cast<char*>(&_impl_.user_info_),
          reinterpret_cast<char*>(&other->_impl_.user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WgConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[9]);
}

// ===================================================================

class WgStartupRequest::_Internal {
 public:
};

WgStartupRequest::WgStartupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgStartupRequest)
}
WgStartupRequest::WgStartupRequest(const WgStartupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgStartupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgStartupRequest)
}

inline void WgStartupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WgStartupRequest::~WgStartupRequest() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgStartupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgStartupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WgStartupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgStartupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgStartupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgStartupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgStartupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgStartupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgStartupRequest)
  return target;
}

size_t WgStartupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgStartupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgStartupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgStartupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgStartupRequest::GetClassData() const { return &_class_data_; }


void WgStartupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgStartupRequest*>(&to_msg);
  auto& from = static_cast<const WgStartupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgStartupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgStartupRequest::CopyFrom(const WgStartupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgStartupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgStartupRequest::IsInitialized() const {
  return true;
}

void WgStartupRequest::InternalSwap(WgStartupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WgStartupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[10]);
}

// ===================================================================

class WgShutdownRequest::_Internal {
 public:
};

WgShutdownRequest::WgShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgShutdownRequest)
}
WgShutdownRequest::WgShutdownRequest(const WgShutdownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgShutdownRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgShutdownRequest)
}

inline void WgShutdownRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WgShutdownRequest::~WgShutdownRequest() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgShutdownRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgShutdownRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WgShutdownRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgShutdownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgShutdownRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgShutdownRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgShutdownRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgShutdownRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgShutdownRequest)
  return target;
}

size_t WgShutdownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgShutdownRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgShutdownRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgShutdownRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgShutdownRequest::GetClassData() const { return &_class_data_; }


void WgShutdownRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgShutdownRequest*>(&to_msg);
  auto& from = static_cast<const WgShutdownRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgShutdownRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgShutdownRequest::CopyFrom(const WgShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgShutdownRequest::IsInitialized() const {
  return true;
}

void WgShutdownRequest::InternalSwap(WgShutdownRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WgShutdownRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[11]);
}

// ===================================================================

class WgExecRequest::_Internal {
 public:
};

WgExecRequest::WgExecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgExecRequest)
}
WgExecRequest::WgExecRequest(const WgExecRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgExecRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdline_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmdline().empty()) {
    _this->_impl_.cmdline_.Set(from._internal_cmdline(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgExecRequest)
}

inline void WgExecRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdline_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WgExecRequest::~WgExecRequest() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgExecRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgExecRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmdline_.Destroy();
}

void WgExecRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgExecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgExecRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmdline_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgExecRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cmdline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgExecRequest.cmdline"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgExecRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgExecRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string cmdline = 2;
  if (!this->_internal_cmdline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmdline().data(), static_cast<int>(this->_internal_cmdline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgExecRequest.cmdline");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cmdline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgExecRequest)
  return target;
}

size_t WgExecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgExecRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmdline = 2;
  if (!this->_internal_cmdline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmdline());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgExecRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgExecRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgExecRequest::GetClassData() const { return &_class_data_; }


void WgExecRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgExecRequest*>(&to_msg);
  auto& from = static_cast<const WgExecRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgExecRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmdline().empty()) {
    _this->_internal_set_cmdline(from._internal_cmdline());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgExecRequest::CopyFrom(const WgExecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgExecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgExecRequest::IsInitialized() const {
  return true;
}

void WgExecRequest::InternalSwap(WgExecRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmdline_, lhs_arena,
      &other->_impl_.cmdline_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WgExecRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[12]);
}

// ===================================================================

class WgKeypair::_Internal {
 public:
};

WgKeypair::WgKeypair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgKeypair)
}
WgKeypair::WgKeypair(const WgKeypair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgKeypair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.private_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    _this->_impl_.private_key_.Set(from._internal_private_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgKeypair)
}

inline void WgKeypair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.private_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WgKeypair::~WgKeypair() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgKeypair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgKeypair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
  _impl_.private_key_.Destroy();
}

void WgKeypair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgKeypair::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgKeypair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _impl_.private_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgKeypair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgKeypair.public_key"));
        } else
          goto handle_unusual;
        continue;
      // string private_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_private_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgKeypair.private_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgKeypair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgKeypair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgKeypair.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // string private_key = 2;
  if (!this->_internal_private_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_private_key().data(), static_cast<int>(this->_internal_private_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgKeypair.private_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgKeypair)
  return target;
}

size_t WgKeypair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgKeypair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // string private_key = 2;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_private_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgKeypair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgKeypair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgKeypair::GetClassData() const { return &_class_data_; }


void WgKeypair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgKeypair*>(&to_msg);
  auto& from = static_cast<const WgKeypair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgKeypair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_private_key().empty()) {
    _this->_internal_set_private_key(from._internal_private_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgKeypair::CopyFrom(const WgKeypair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgKeypair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgKeypair::IsInitialized() const {
  return true;
}

void WgKeypair::InternalSwap(WgKeypair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_key_, lhs_arena,
      &other->_impl_.private_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WgKeypair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[13]);
}

// ===================================================================

class WgPublicKey::_Internal {
 public:
};

WgPublicKey::WgPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgPublicKey)
}
WgPublicKey::WgPublicKey(const WgPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgPublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgPublicKey)
}

inline void WgPublicKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WgPublicKey::~WgPublicKey() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void WgPublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgPublicKey.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgPublicKey.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgPublicKey)
  return target;
}

size_t WgPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgPublicKey::GetClassData() const { return &_class_data_; }


void WgPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgPublicKey*>(&to_msg);
  auto& from = static_cast<const WgPublicKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgPublicKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgPublicKey::CopyFrom(const WgPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgPublicKey::IsInitialized() const {
  return true;
}

void WgPublicKey::InternalSwap(WgPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WgPublicKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[14]);
}

// ===================================================================

class WgPrivateKey::_Internal {
 public:
};

WgPrivateKey::WgPrivateKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid_scope.WgPrivateKey)
}
WgPrivateKey::WgPrivateKey(const WgPrivateKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WgPrivateKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid_scope.WgPrivateKey)
}

inline void WgPrivateKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WgPrivateKey::~WgPrivateKey() {
  // @@protoc_insertion_point(destructor:hybrid_scope.WgPrivateKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WgPrivateKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void WgPrivateKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WgPrivateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid_scope.WgPrivateKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WgPrivateKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid_scope.WgPrivateKey.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WgPrivateKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid_scope.WgPrivateKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid_scope.WgPrivateKey.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid_scope.WgPrivateKey)
  return target;
}

size_t WgPrivateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid_scope.WgPrivateKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WgPrivateKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WgPrivateKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WgPrivateKey::GetClassData() const { return &_class_data_; }


void WgPrivateKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WgPrivateKey*>(&to_msg);
  auto& from = static_cast<const WgPrivateKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid_scope.WgPrivateKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WgPrivateKey::CopyFrom(const WgPrivateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid_scope.WgPrivateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WgPrivateKey::IsInitialized() const {
  return true;
}

void WgPrivateKey::InternalSwap(WgPrivateKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WgPrivateKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hybrid_5fscope_2eproto_getter, &descriptor_table_hybrid_5fscope_2eproto_once,
      file_level_metadata_hybrid_5fscope_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hybrid_scope
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hybrid_scope::EchoRequest*
Arena::CreateMaybeMessage< ::hybrid_scope::EchoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::EchoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::EchoResponse*
Arena::CreateMaybeMessage< ::hybrid_scope::EchoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::EchoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::Void*
Arena::CreateMaybeMessage< ::hybrid_scope::Void >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::Void >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::RpcResult*
Arena::CreateMaybeMessage< ::hybrid_scope::RpcResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::RpcResult >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgPeerInfo*
Arena::CreateMaybeMessage< ::hybrid_scope::WgPeerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgPeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgGatewayConfig*
Arena::CreateMaybeMessage< ::hybrid_scope::WgGatewayConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgGatewayConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgTunnelConfig*
Arena::CreateMaybeMessage< ::hybrid_scope::WgTunnelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgTunnelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::UserInfo*
Arena::CreateMaybeMessage< ::hybrid_scope::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::DeviceInfo*
Arena::CreateMaybeMessage< ::hybrid_scope::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgConfigRequest*
Arena::CreateMaybeMessage< ::hybrid_scope::WgConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgStartupRequest*
Arena::CreateMaybeMessage< ::hybrid_scope::WgStartupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgStartupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgShutdownRequest*
Arena::CreateMaybeMessage< ::hybrid_scope::WgShutdownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgShutdownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgExecRequest*
Arena::CreateMaybeMessage< ::hybrid_scope::WgExecRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgExecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgKeypair*
Arena::CreateMaybeMessage< ::hybrid_scope::WgKeypair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgKeypair >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgPublicKey*
Arena::CreateMaybeMessage< ::hybrid_scope::WgPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid_scope::WgPrivateKey*
Arena::CreateMaybeMessage< ::hybrid_scope::WgPrivateKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid_scope::WgPrivateKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
