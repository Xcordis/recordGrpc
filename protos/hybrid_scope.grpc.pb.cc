// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hybrid_scope.proto

#include "hybrid_scope.pb.h"
#include "hybrid_scope.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace hybrid_scope {

static const char* Echo_method_names[] = {
  "/hybrid_scope.Echo/echo",
};

std::unique_ptr< Echo::Stub> Echo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Echo::Stub> stub(new Echo::Stub(channel, options));
  return stub;
}

Echo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_echo_(Echo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Echo::Stub::echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::hybrid_scope::EchoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_echo_, context, request, response);
}

void Echo::Stub::async::echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, std::move(f));
}

void Echo::Stub::async::echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>* Echo::Stub::PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hybrid_scope::EchoResponse, ::hybrid_scope::EchoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_echo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>* Echo::Stub::AsyncechoRaw(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncechoRaw(context, request, cq);
  result->StartCall();
  return result;
}

Echo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Echo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Echo::Service, ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Echo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hybrid_scope::EchoRequest* req,
             ::hybrid_scope::EchoResponse* resp) {
               return service->echo(ctx, req, resp);
             }, this)));
}

Echo::Service::~Service() {
}

::grpc::Status Echo::Service::echo(::grpc::ServerContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Wg_method_names[] = {
  "/hybrid_scope.Wg/startup",
  "/hybrid_scope.Wg/shutdown",
  "/hybrid_scope.Wg/sync_config",
  "/hybrid_scope.Wg/exec",
};

std::unique_ptr< Wg::Stub> Wg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Wg::Stub> stub(new Wg::Stub(channel, options));
  return stub;
}

Wg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_startup_(Wg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_shutdown_(Wg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sync_config_(Wg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exec_(Wg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Wg::Stub::startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::hybrid_scope::RpcResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_startup_, context, request, response);
}

void Wg::Stub::async::startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startup_, context, request, response, std::move(f));
}

void Wg::Stub::async::startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::PrepareAsyncstartupRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hybrid_scope::RpcResult, ::hybrid_scope::WgStartupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_startup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::AsyncstartupRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wg::Stub::shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::hybrid_scope::RpcResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_shutdown_, context, request, response);
}

void Wg::Stub::async::shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, std::move(f));
}

void Wg::Stub::async::shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hybrid_scope::RpcResult, ::hybrid_scope::WgShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::AsyncshutdownRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wg::Stub::sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::hybrid_scope::RpcResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sync_config_, context, request, response);
}

void Wg::Stub::async::sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sync_config_, context, request, response, std::move(f));
}

void Wg::Stub::async::sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sync_config_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::PrepareAsyncsync_configRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hybrid_scope::RpcResult, ::hybrid_scope::WgConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sync_config_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::Asyncsync_configRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsync_configRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wg::Stub::exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::hybrid_scope::RpcResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exec_, context, request, response);
}

void Wg::Stub::async::exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exec_, context, request, response, std::move(f));
}

void Wg::Stub::async::exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::PrepareAsyncexecRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hybrid_scope::RpcResult, ::hybrid_scope::WgExecRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Wg::Stub::AsyncexecRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexecRaw(context, request, cq);
  result->StartCall();
  return result;
}

Wg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wg::Service, ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hybrid_scope::WgStartupRequest* req,
             ::hybrid_scope::RpcResult* resp) {
               return service->startup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wg::Service, ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hybrid_scope::WgShutdownRequest* req,
             ::hybrid_scope::RpcResult* resp) {
               return service->shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wg::Service, ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hybrid_scope::WgConfigRequest* req,
             ::hybrid_scope::RpcResult* resp) {
               return service->sync_config(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wg::Service, ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hybrid_scope::WgExecRequest* req,
             ::hybrid_scope::RpcResult* resp) {
               return service->exec(ctx, req, resp);
             }, this)));
}

Wg::Service::~Service() {
}

::grpc::Status Wg::Service::startup(::grpc::ServerContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wg::Service::shutdown(::grpc::ServerContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wg::Service::sync_config(::grpc::ServerContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wg::Service::exec(::grpc::ServerContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* KeychainGenerater_method_names[] = {
  "/hybrid_scope.KeychainGenerater/generate_keypair",
  "/hybrid_scope.KeychainGenerater/generate_public",
};

std::unique_ptr< KeychainGenerater::Stub> KeychainGenerater::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeychainGenerater::Stub> stub(new KeychainGenerater::Stub(channel, options));
  return stub;
}

KeychainGenerater::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_generate_keypair_(KeychainGenerater_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_generate_public_(KeychainGenerater_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeychainGenerater::Stub::generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::hybrid_scope::WgKeypair* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hybrid_scope::Void, ::hybrid_scope::WgKeypair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_generate_keypair_, context, request, response);
}

void KeychainGenerater::Stub::async::generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hybrid_scope::Void, ::hybrid_scope::WgKeypair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_generate_keypair_, context, request, response, std::move(f));
}

void KeychainGenerater::Stub::async::generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_generate_keypair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>* KeychainGenerater::Stub::PrepareAsyncgenerate_keypairRaw(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hybrid_scope::WgKeypair, ::hybrid_scope::Void, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_generate_keypair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>* KeychainGenerater::Stub::Asyncgenerate_keypairRaw(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgenerate_keypairRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KeychainGenerater::Stub::generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::hybrid_scope::WgPublicKey* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_generate_public_, context, request, response);
}

void KeychainGenerater::Stub::async::generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_generate_public_, context, request, response, std::move(f));
}

void KeychainGenerater::Stub::async::generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_generate_public_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>* KeychainGenerater::Stub::PrepareAsyncgenerate_publicRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hybrid_scope::WgPublicKey, ::hybrid_scope::WgPrivateKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_generate_public_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>* KeychainGenerater::Stub::Asyncgenerate_publicRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgenerate_publicRaw(context, request, cq);
  result->StartCall();
  return result;
}

KeychainGenerater::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeychainGenerater_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeychainGenerater::Service, ::hybrid_scope::Void, ::hybrid_scope::WgKeypair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeychainGenerater::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hybrid_scope::Void* req,
             ::hybrid_scope::WgKeypair* resp) {
               return service->generate_keypair(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeychainGenerater_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeychainGenerater::Service, ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeychainGenerater::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hybrid_scope::WgPrivateKey* req,
             ::hybrid_scope::WgPublicKey* resp) {
               return service->generate_public(ctx, req, resp);
             }, this)));
}

KeychainGenerater::Service::~Service() {
}

::grpc::Status KeychainGenerater::Service::generate_keypair(::grpc::ServerContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeychainGenerater::Service::generate_public(::grpc::ServerContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hybrid_scope

