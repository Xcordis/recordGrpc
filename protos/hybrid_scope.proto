syntax = "proto3";

package hybrid_scope;

service Echo { rpc echo(EchoRequest) returns (EchoResponse); }

message EchoRequest { string name = 1; }

message EchoResponse { string message = 1; }

message Void {}

message RpcResult {
  int32 code = 1;
  string message = 2;
}

message WgPeerInfo {
  string pubkey = 1;
  string prikey = 2;
  string ipv4 = 3;
  string ipv6 = 4;
  uint32 port = 5;
  string mask = 6;
}

message WgGatewayConfig {
  int32 id = 1;
  string ip = 2;
  uint32 wireguard_port = 3;
  string name = 4;
  uint32 gateway_id = 5;
  string gateway_uuid = 6;
  string gateway_public_key = 7;
  uint64 obf_key = 8;
  uint32 keep_alive =9;
  string transport = 10;
  uint32 mode = 11;
  uint32 encrypt_mode = 12;
  string virtual_ipv4 = 13;
  string virtual_ipv6 = 14;
  uint32 mtu = 15;
}

message WgTunnelConfig {
  WgPeerInfo peer_info = 1;
  WgGatewayConfig gateway_info = 2;
}

message UserInfo {
  string token = 1;
  uint64 user_id = 2;
  uint64 org_id = 3;
  string tenant_name = 34;
}

message DeviceInfo {
  int32 device_id = 1;
  string device_uuid = 2;
}

message WgConfigRequest { 
  int32 opt = 1;
  uint64 box_id = 2;
  UserInfo user_info = 3;
  DeviceInfo device_info = 4;
  repeated WgTunnelConfig tunnels = 5;
}

message WgStartupRequest { int32 id = 1; }

message WgShutdownRequest { int32 id = 1; }

message WgExecRequest {
  int32 id = 1;
  string cmdline = 2;
}

// 隧道相关
service Wg {
  rpc startup(WgStartupRequest) returns (RpcResult);
  rpc shutdown(WgShutdownRequest) returns (RpcResult);
  rpc sync_config(WgConfigRequest) returns (RpcResult);
  rpc exec(WgExecRequest) returns (RpcResult);
}

// // 应用控制
// service App {}

// // 后台服务控制
// service Service {}

// message WgKeypair {
//   string public_key = 1;
//   string private_key = 2;
// }

// message WgPublicKey { string value = 1; }

// message WgPrivateKey { string value = 1; }

// service KeychainGenerater {
//   rpc generate_keypair(Void) returns (WgKeypair);
//   rpc generate_public(WgPrivateKey) returns (WgPublicKey);
// }

// message AuthLoginRequest {

// }

// message AuthHeartbeatRequest {

// }

// message AuthLogoutRequest {

// }

// service Auth {
//   rpc login(Void) returns (Void);
//   rpc logout(Void) returns (Void);
//   rpc heartbeat(Void) returns (Void);
// }
