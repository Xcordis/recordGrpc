// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hybrid_scope.proto
#ifndef GRPC_hybrid_5fscope_2eproto__INCLUDED
#define GRPC_hybrid_5fscope_2eproto__INCLUDED

#include "hybrid_scope.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace hybrid_scope {

class Echo final {
 public:
  static constexpr char const* service_full_name() {
    return "hybrid_scope.Echo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::hybrid_scope::EchoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::EchoResponse>> Asyncecho(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::EchoResponse>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::EchoResponse>> PrepareAsyncecho(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::EchoResponse>>(PrepareAsyncechoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::EchoResponse>* AsyncechoRaw(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::EchoResponse>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::hybrid_scope::EchoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>> Asyncecho(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>> PrepareAsyncecho(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>>(PrepareAsyncechoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response, std::function<void(::grpc::Status)>) override;
      void echo(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>* AsyncechoRaw(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::EchoResponse>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::hybrid_scope::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_echo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status echo(::grpc::ServerContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::hybrid_scope::EchoRequest* /*request*/, ::hybrid_scope::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::hybrid_scope::EchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::hybrid_scope::EchoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_echo<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_echo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hybrid_scope::EchoRequest* request, ::hybrid_scope::EchoResponse* response) { return this->echo(context, request, response); }));}
    void SetMessageAllocatorFor_echo(
        ::grpc::MessageAllocator< ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::hybrid_scope::EchoRequest* /*request*/, ::hybrid_scope::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* echo(
      ::grpc::CallbackServerContext* /*context*/, const ::hybrid_scope::EchoRequest* /*request*/, ::hybrid_scope::EchoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_echo<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::hybrid_scope::EchoRequest* /*request*/, ::hybrid_scope::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_echo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::hybrid_scope::EchoRequest* /*request*/, ::hybrid_scope::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_echo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->echo(context, request, response); }));
    }
    ~WithRawCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::hybrid_scope::EchoRequest* /*request*/, ::hybrid_scope::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hybrid_scope::EchoRequest, ::hybrid_scope::EchoResponse>* streamer) {
                       return this->Streamedecho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::hybrid_scope::EchoRequest* /*request*/, ::hybrid_scope::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedecho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hybrid_scope::EchoRequest,::hybrid_scope::EchoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_echo<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_echo<Service > StreamedService;
};

// 隧道相关
class Wg final {
 public:
  static constexpr char const* service_full_name() {
    return "hybrid_scope.Wg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::hybrid_scope::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> Asyncstartup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(AsyncstartupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> PrepareAsyncstartup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(PrepareAsyncstartupRaw(context, request, cq));
    }
    virtual ::grpc::Status shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::hybrid_scope::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> Asyncshutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(AsyncshutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> PrepareAsyncshutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(PrepareAsyncshutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::hybrid_scope::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> Asyncsync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(Asyncsync_configRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> PrepareAsyncsync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(PrepareAsyncsync_configRaw(context, request, cq));
    }
    virtual ::grpc::Status exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::hybrid_scope::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> Asyncexec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(AsyncexecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>> PrepareAsyncexec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>>(PrepareAsyncexecRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* AsyncstartupRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* PrepareAsyncstartupRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* AsyncshutdownRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* Asyncsync_configRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* PrepareAsyncsync_configRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* AsyncexecRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::RpcResult>* PrepareAsyncexecRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::hybrid_scope::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> Asyncstartup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(AsyncstartupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> PrepareAsyncstartup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(PrepareAsyncstartupRaw(context, request, cq));
    }
    ::grpc::Status shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::hybrid_scope::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> Asyncshutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(AsyncshutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> PrepareAsyncshutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(PrepareAsyncshutdownRaw(context, request, cq));
    }
    ::grpc::Status sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::hybrid_scope::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> Asyncsync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(Asyncsync_configRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> PrepareAsyncsync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(PrepareAsyncsync_configRaw(context, request, cq));
    }
    ::grpc::Status exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::hybrid_scope::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> Asyncexec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(AsyncexecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>> PrepareAsyncexec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>>(PrepareAsyncexecRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) override;
      void startup(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) override;
      void shutdown(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) override;
      void sync_config(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response, std::function<void(::grpc::Status)>) override;
      void exec(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* AsyncstartupRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* PrepareAsyncstartupRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgStartupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* AsyncshutdownRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* Asyncsync_configRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* PrepareAsyncsync_configRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* AsyncexecRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::RpcResult>* PrepareAsyncexecRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgExecRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_startup_;
    const ::grpc::internal::RpcMethod rpcmethod_shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_sync_config_;
    const ::grpc::internal::RpcMethod rpcmethod_exec_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status startup(::grpc::ServerContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response);
    virtual ::grpc::Status shutdown(::grpc::ServerContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response);
    virtual ::grpc::Status sync_config(::grpc::ServerContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response);
    virtual ::grpc::Status exec(::grpc::ServerContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_startup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_startup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_startup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startup(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgStartupRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststartup(::grpc::ServerContext* context, ::hybrid_scope::WgStartupRequest* request, ::grpc::ServerAsyncResponseWriter< ::hybrid_scope::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_shutdown() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgShutdownRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshutdown(::grpc::ServerContext* context, ::hybrid_scope::WgShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::hybrid_scope::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sync_config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sync_config() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_sync_config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_config(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgConfigRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsync_config(::grpc::ServerContext* context, ::hybrid_scope::WgConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::hybrid_scope::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exec() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exec(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgExecRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestexec(::grpc::ServerContext* context, ::hybrid_scope::WgExecRequest* request, ::grpc::ServerAsyncResponseWriter< ::hybrid_scope::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_startup<WithAsyncMethod_shutdown<WithAsyncMethod_sync_config<WithAsyncMethod_exec<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_startup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_startup() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hybrid_scope::WgStartupRequest* request, ::hybrid_scope::RpcResult* response) { return this->startup(context, request, response); }));}
    void SetMessageAllocatorFor_startup(
        ::grpc::MessageAllocator< ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_startup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startup(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgStartupRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* startup(
      ::grpc::CallbackServerContext* /*context*/, const ::hybrid_scope::WgStartupRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_shutdown() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hybrid_scope::WgShutdownRequest* request, ::hybrid_scope::RpcResult* response) { return this->shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_shutdown(
        ::grpc::MessageAllocator< ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgShutdownRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::hybrid_scope::WgShutdownRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sync_config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sync_config() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hybrid_scope::WgConfigRequest* request, ::hybrid_scope::RpcResult* response) { return this->sync_config(context, request, response); }));}
    void SetMessageAllocatorFor_sync_config(
        ::grpc::MessageAllocator< ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sync_config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_config(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgConfigRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sync_config(
      ::grpc::CallbackServerContext* /*context*/, const ::hybrid_scope::WgConfigRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_exec() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hybrid_scope::WgExecRequest* request, ::hybrid_scope::RpcResult* response) { return this->exec(context, request, response); }));}
    void SetMessageAllocatorFor_exec(
        ::grpc::MessageAllocator< ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exec(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgExecRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exec(
      ::grpc::CallbackServerContext* /*context*/, const ::hybrid_scope::WgExecRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_startup<WithCallbackMethod_shutdown<WithCallbackMethod_sync_config<WithCallbackMethod_exec<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_startup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_startup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_startup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startup(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgStartupRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_shutdown() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgShutdownRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sync_config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sync_config() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_sync_config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_config(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgConfigRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exec() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exec(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgExecRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_startup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_startup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_startup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startup(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgStartupRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststartup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_shutdown() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgShutdownRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sync_config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sync_config() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_sync_config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_config(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgConfigRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsync_config(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exec() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exec(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgExecRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestexec(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_startup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_startup() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->startup(context, request, response); }));
    }
    ~WithRawCallbackMethod_startup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startup(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgStartupRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* startup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_shutdown() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->shutdown(context, request, response); }));
    }
    ~WithRawCallbackMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgShutdownRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sync_config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sync_config() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sync_config(context, request, response); }));
    }
    ~WithRawCallbackMethod_sync_config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_config(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgConfigRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sync_config(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_exec() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exec(context, request, response); }));
    }
    ~WithRawCallbackMethod_exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exec(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgExecRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exec(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_startup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_startup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hybrid_scope::WgStartupRequest, ::hybrid_scope::RpcResult>* streamer) {
                       return this->Streamedstartup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_startup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status startup(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgStartupRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstartup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hybrid_scope::WgStartupRequest,::hybrid_scope::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_shutdown() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hybrid_scope::WgShutdownRequest, ::hybrid_scope::RpcResult>* streamer) {
                       return this->Streamedshutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgShutdownRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedshutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hybrid_scope::WgShutdownRequest,::hybrid_scope::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sync_config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sync_config() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hybrid_scope::WgConfigRequest, ::hybrid_scope::RpcResult>* streamer) {
                       return this->Streamedsync_config(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sync_config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sync_config(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgConfigRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsync_config(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hybrid_scope::WgConfigRequest,::hybrid_scope::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exec() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hybrid_scope::WgExecRequest, ::hybrid_scope::RpcResult>* streamer) {
                       return this->Streamedexec(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exec(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgExecRequest* /*request*/, ::hybrid_scope::RpcResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedexec(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hybrid_scope::WgExecRequest,::hybrid_scope::RpcResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_startup<WithStreamedUnaryMethod_shutdown<WithStreamedUnaryMethod_sync_config<WithStreamedUnaryMethod_exec<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_startup<WithStreamedUnaryMethod_shutdown<WithStreamedUnaryMethod_sync_config<WithStreamedUnaryMethod_exec<Service > > > > StreamedService;
};

class KeychainGenerater final {
 public:
  static constexpr char const* service_full_name() {
    return "hybrid_scope.KeychainGenerater";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::hybrid_scope::WgKeypair* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgKeypair>> Asyncgenerate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgKeypair>>(Asyncgenerate_keypairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgKeypair>> PrepareAsyncgenerate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgKeypair>>(PrepareAsyncgenerate_keypairRaw(context, request, cq));
    }
    virtual ::grpc::Status generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::hybrid_scope::WgPublicKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgPublicKey>> Asyncgenerate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgPublicKey>>(Asyncgenerate_publicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgPublicKey>> PrepareAsyncgenerate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgPublicKey>>(PrepareAsyncgenerate_publicRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response, std::function<void(::grpc::Status)>) = 0;
      virtual void generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgKeypair>* Asyncgenerate_keypairRaw(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgKeypair>* PrepareAsyncgenerate_keypairRaw(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgPublicKey>* Asyncgenerate_publicRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hybrid_scope::WgPublicKey>* PrepareAsyncgenerate_publicRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::hybrid_scope::WgKeypair* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>> Asyncgenerate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>>(Asyncgenerate_keypairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>> PrepareAsyncgenerate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>>(PrepareAsyncgenerate_keypairRaw(context, request, cq));
    }
    ::grpc::Status generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::hybrid_scope::WgPublicKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>> Asyncgenerate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>>(Asyncgenerate_publicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>> PrepareAsyncgenerate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>>(PrepareAsyncgenerate_publicRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response, std::function<void(::grpc::Status)>) override;
      void generate_keypair(::grpc::ClientContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response, ::grpc::ClientUnaryReactor* reactor) override;
      void generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response, std::function<void(::grpc::Status)>) override;
      void generate_public(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>* Asyncgenerate_keypairRaw(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgKeypair>* PrepareAsyncgenerate_keypairRaw(::grpc::ClientContext* context, const ::hybrid_scope::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>* Asyncgenerate_publicRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hybrid_scope::WgPublicKey>* PrepareAsyncgenerate_publicRaw(::grpc::ClientContext* context, const ::hybrid_scope::WgPrivateKey& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_generate_keypair_;
    const ::grpc::internal::RpcMethod rpcmethod_generate_public_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status generate_keypair(::grpc::ServerContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response);
    virtual ::grpc::Status generate_public(::grpc::ServerContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_generate_keypair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_generate_keypair() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_generate_keypair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_keypair(::grpc::ServerContext* /*context*/, const ::hybrid_scope::Void* /*request*/, ::hybrid_scope::WgKeypair* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgenerate_keypair(::grpc::ServerContext* context, ::hybrid_scope::Void* request, ::grpc::ServerAsyncResponseWriter< ::hybrid_scope::WgKeypair>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_generate_public : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_generate_public() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_generate_public() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_public(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgPrivateKey* /*request*/, ::hybrid_scope::WgPublicKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgenerate_public(::grpc::ServerContext* context, ::hybrid_scope::WgPrivateKey* request, ::grpc::ServerAsyncResponseWriter< ::hybrid_scope::WgPublicKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_generate_keypair<WithAsyncMethod_generate_public<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_generate_keypair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_generate_keypair() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::Void, ::hybrid_scope::WgKeypair>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hybrid_scope::Void* request, ::hybrid_scope::WgKeypair* response) { return this->generate_keypair(context, request, response); }));}
    void SetMessageAllocatorFor_generate_keypair(
        ::grpc::MessageAllocator< ::hybrid_scope::Void, ::hybrid_scope::WgKeypair>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::Void, ::hybrid_scope::WgKeypair>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_generate_keypair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_keypair(::grpc::ServerContext* /*context*/, const ::hybrid_scope::Void* /*request*/, ::hybrid_scope::WgKeypair* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generate_keypair(
      ::grpc::CallbackServerContext* /*context*/, const ::hybrid_scope::Void* /*request*/, ::hybrid_scope::WgKeypair* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_generate_public : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_generate_public() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hybrid_scope::WgPrivateKey* request, ::hybrid_scope::WgPublicKey* response) { return this->generate_public(context, request, response); }));}
    void SetMessageAllocatorFor_generate_public(
        ::grpc::MessageAllocator< ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_generate_public() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_public(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgPrivateKey* /*request*/, ::hybrid_scope::WgPublicKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generate_public(
      ::grpc::CallbackServerContext* /*context*/, const ::hybrid_scope::WgPrivateKey* /*request*/, ::hybrid_scope::WgPublicKey* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_generate_keypair<WithCallbackMethod_generate_public<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_generate_keypair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_generate_keypair() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_generate_keypair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_keypair(::grpc::ServerContext* /*context*/, const ::hybrid_scope::Void* /*request*/, ::hybrid_scope::WgKeypair* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_generate_public : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_generate_public() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_generate_public() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_public(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgPrivateKey* /*request*/, ::hybrid_scope::WgPublicKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_generate_keypair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_generate_keypair() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_generate_keypair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_keypair(::grpc::ServerContext* /*context*/, const ::hybrid_scope::Void* /*request*/, ::hybrid_scope::WgKeypair* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgenerate_keypair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_generate_public : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_generate_public() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_generate_public() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_public(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgPrivateKey* /*request*/, ::hybrid_scope::WgPublicKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgenerate_public(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_generate_keypair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_generate_keypair() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->generate_keypair(context, request, response); }));
    }
    ~WithRawCallbackMethod_generate_keypair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_keypair(::grpc::ServerContext* /*context*/, const ::hybrid_scope::Void* /*request*/, ::hybrid_scope::WgKeypair* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generate_keypair(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_generate_public : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_generate_public() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->generate_public(context, request, response); }));
    }
    ~WithRawCallbackMethod_generate_public() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_public(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgPrivateKey* /*request*/, ::hybrid_scope::WgPublicKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generate_public(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_generate_keypair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_generate_keypair() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hybrid_scope::Void, ::hybrid_scope::WgKeypair>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hybrid_scope::Void, ::hybrid_scope::WgKeypair>* streamer) {
                       return this->Streamedgenerate_keypair(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_generate_keypair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status generate_keypair(::grpc::ServerContext* /*context*/, const ::hybrid_scope::Void* /*request*/, ::hybrid_scope::WgKeypair* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedgenerate_keypair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hybrid_scope::Void,::hybrid_scope::WgKeypair>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_generate_public : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_generate_public() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hybrid_scope::WgPrivateKey, ::hybrid_scope::WgPublicKey>* streamer) {
                       return this->Streamedgenerate_public(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_generate_public() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status generate_public(::grpc::ServerContext* /*context*/, const ::hybrid_scope::WgPrivateKey* /*request*/, ::hybrid_scope::WgPublicKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedgenerate_public(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hybrid_scope::WgPrivateKey,::hybrid_scope::WgPublicKey>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_generate_keypair<WithStreamedUnaryMethod_generate_public<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_generate_keypair<WithStreamedUnaryMethod_generate_public<Service > > StreamedService;
};

}  // namespace hybrid_scope


#endif  // GRPC_hybrid_5fscope_2eproto__INCLUDED
